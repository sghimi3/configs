#!/bin/bash


source "/usr/lib/smartlog/smartlog.sh"

set +e

# ==================================================================================
# If file extension is not given, attempt to find the source file
# ==================================================================================
find_source() {

  # Search for source file in current directory
  searchfile=`ls $file.* 2> /dev/null`

  # Exit script if no matches are found
  if [ -z "$searchfile" ]; then
    die "Source file for $file not found"
  elif [ $(echo "$searchfile" | wc -l) -gt 1 ]; then
    die "Multiple file extensions found for $file. Please supply full file name"
  else
    file="$searchfile"
    ext="${file##*.}"
  fi

}


# ==================================================================================
# Get file info
# ==================================================================================
file="$1"           # filename.extension
ext="${file##*.}"   # extension
exe="${file%%.*}"   # filename
args="${@:2}"       # all arguments passed after file name


# Exit if file name is not given
if [ -z "$file" ]; then
  die "Usage: run [filename.extension] [args]"
# Attempt to find extension if not given
elif [[ "$file" != *.* ]]; then
  find_source
fi


# ==================================================================================
# Set commands for each filetype
# ==================================================================================
declare -A compile
declare -A flags
declare -A clean
declare -A run

compile[hs]="ghc $file -o $exe"         flags[hs]=""               run[hs]="./$exe"
compile[tex]="pdflatex $file"           flags[tex]=""              run[tex]="evince $exe.pdf"
compile[c]="gcc $file -o $exe"          flags[c]="-g -std=c99 -lm" run[c]="./$exe"
compile[cpp]="g++ $file -o $exe"        flags[cpp]="-g -std=c++11" run[cpp]="./$exe"
compile[java]="javac $file"             flags[java]="-g"           run[java]="java $exe"
compile[rs]="rustc $file -o $exe"       flags[rs]="-g"             run[rs]="./$exe"
compile[cs]="mcs $file"                 flags[cs]="-debug"         run[cs]="mono $exe.exe"
compile[md]="pandoc $file -o $exe.html" flags[md]="-s"             run[md]="google-chrome $exe.html"
compile[rst]="rst2html $file"           flags[rst]="$exe.html"     run[rst]="google-chrome $exe.html"
compile[php]="php $file"                flags[php]="$exe.html"     run[php]="google-chrome $exe.html"
                                        flags[sh]=""               run[sh]="sh $file"
                                        flags[py]=""               run[py]="python $file"

# Auxiliary files to remove; probably not important?
clean[hs]="$exe.hi $exe.o"
clean[tex]="$exe.log $exe.aux $exe.out"

# ==================================================================================
# Compile and run commands based on file extension
# ==================================================================================
case "$ext" in
  hs)   ${compile[$ext]}   ${flags[$ext]} && ${run[$ext]} $args; rm ${clean[$ext]} ;;
  tex)  ${compile[$ext]}   ${flags[$ext]} && ${run[$ext]} $args; rm ${clean[$ext]} ;;
  c)    ${compile[$ext]}   ${flags[$ext]} && ${run[$ext]} $args                    ;;
  cpp)  ${compile[$ext]}   ${flags[$ext]} && ${run[$ext]} $args                    ;;
  java) ${compile[$ext]}   ${flags[$ext]} && ${run[$ext]} $args                    ;;
  rs)   ${compile[$ext]}   ${flags[$ext]} && ${run[$ext]} $args                    ;;
  cs)   ${compile[$ext]}   ${flags[$ext]} && ${run[$ext]} $args                    ;;
  md)   ${compile[$ext]}   ${flags[$ext]} && ${run[$ext]} $args                    ;;
  rst)  ${compile[$ext]} > ${flags[$ext]} && ${run[$ext]} $args                    ;;
  php)  ${compile[$ext]} > ${flags[$ext]} && ${run[$ext]} $args                    ;;
  sh)                                        ${run[$ext]} $args                    ;;
  py)                                        ${run[$ext]} $args                    ;;
  *)    die "File \"$file\" with extension \"$ext\" not found"                     ;;
esac
