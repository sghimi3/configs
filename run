#!/bin/bash


source "/usr/lib/smartlog/smartlog.sh"

set +e

# ==================================================================================
# Get file info
# ==================================================================================
file="$1"             # filename.extension
ext="${file##*.}"   # extension
exe="${file%%.*}"   # filename
args="${@:2}"       # all arguments passed after file name


# ==================================================================================
# Exit if file name is not given
# ==================================================================================
if [ -z "$file" ]; then
  die "Usage: run [filename.extension] [args]"
fi


# ==================================================================================
# If file extension is not given, attempt to find the source file
# ==================================================================================
if [[ "$file" != *.* ]]; then

  # Search for source file in current directory
  searchfile=`ls $file.* 2> /dev/null`

  # Exit script if no matches are found
  if [ -z "$searchfile" ]; then
    die "Source file for $file not found"
  fi

  # Exit if multiple files match
  if [ $(echo "$searchfile" | wc -l) -gt 1 ]; then
    die "Multiple file extensions found for $file. Please supply full file name"

  # Unnecessary? If multiple files match, request extension name
  # if [ $(echo "$searchfile" | wc -l) -gt 1 ]; then
  #   echo "Please specify file extension: "
  #   read ext
  #   file="$exe"."$ext"
  #   while [ -z `ls $file 2> /dev/null` ]; do
  #     echo "$file not found. Please specify file extension: "
  #     read ext
  #     file="$exe"."$ext"
  #   done

  # File found
  else
    file="$searchfile"
    ext="${file##*.}"
  fi

fi


# ==================================================================================
# Set flags for each filetype
# ==================================================================================
declare -A flags
flags[c]="-g -std=c99 -lpthread -lm -lrt"
flags[cpp]="-g -std=c++11"
flags[hs]=""
flags[tex]=""
flags[java]="-g"
flags[rs]="-g"
flags[cs]="-debug"
flags[php]=""
flags[rst]=""
flags[sh]=""
flags[py]=""
flags[m]=""
flags[R]="--no-save"

# ==================================================================================
# Set files to remove after compiling
# ==================================================================================
declare -A clean
clean[hs]="$exe.hi $exe.o"
clean[tex]="$exe.log $exe.aux"


# ==================================================================================
# Set compilation commands for each filetype
# ==================================================================================
declare -A compile
compile[c]="gcc $file -o $exe"
compile[cpp]="g++ $file -o $exe"
compile[hs]="ghc $file -o $exe"
compile[tex]="pdflatex $file"
compile[java]="javac $file"
compile[rs]="rustc $file -o $exe"
compile[cs]="mcs $file"
compile[php]="php $file > $exe.html"
compile[rst]="rst2html $file > $exe.html"
compile[sh]=""
compile[py]=""
compile[m]=""
compile[R]=""


declare -A run
run[c]="./$exe"
run[cpp]="./$exe"
run[hs]="./$exe"
run[tex]="evince $exe.pdf"
run[java]="java $exe"
run[rs]="./$exe"
run[cs]="mono $exe.exe"
run[php]="firefox $exe.html"
run[rst]="firefox $exe.html"
run[sh]="sh $file"
run[py]="python $file"


echo $ext
echo "${compile[$ext]} ${flags[$ext]} && ${run[$ext]} $args"

if [[ "$ext" == "sh" || "$ext" == "py" ]]; then
  ${run[$ext]} $args
else
  ${compile[$ext]} ${flags[$ext]} && ${run[$ext]} $args
fi


# ==================================================================================
# Compile and run commands based on file extension
# ==================================================================================
# case "$ext" in
#   #     Compile                 Flags/Cleanup   Run                     Args
#   c)    ${compile[c]}           ${flags[c]}     && ./$exe               $args ;;
#   cpp)  ${compile[cpp]}         ${flags[cpp]}   && ./$exe               $args ;;
#   hs)   ${compile[hs]}    && rm ${clean[hs]}    && ./$exe               $args ;;
#   tex)  ${compile[tex]}   && rm ${clean[tex]}   && evince $exe.pdf      $args ;;
#   java) ${compile[java]}        ${flags[java]}  && java $exe            $args ;;
#   rs)   ${compile[rs]}          ${flags[rs]}    && ./$exe               $args ;;
#   cs)   ${compile[cs]}          ${flags[cs]}    && mono $exe.exe        $args ;;
#   php)  ${compile[php]}                         && firefox $exe.html    $args ;;
#   rst)  ${compile[rst]}                         && firefox $exe.html    $args ;;
#   sh)                                              sh $file             $args ;;
#   py)                                              python $file         $args ;;
#   m)                                               octave $args < $file       ;;
#   R)                                               R $args < $file ${flags[R]};;
#   *)    die "File \"$file\" with extension \"$ext\" not found!"               ;;
# esac
